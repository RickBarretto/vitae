from pathlib import Path
from typing import Literal

import cyclopts
from cyclopts.types import PositiveInt

from src.shared import database, vitae

from . import scanners
from .repository import Researchers
from .usecase import Ingestion

__all__ = ["app"]

app = cyclopts.App(name="ingest")


@app.default
def ingest(
    only: set[str] | None = None,  # noqa: FA102
    strategy: Literal["serial", "pool"] = "pool",
    buffer: int = 50,
    processed: Path = Path("logs/ingestion/processed.log"),
    cores: PositiveInt = 8,
) -> None:
    """Ingest XML documents into the database.

    Parameters
    ----------
    only : set[int] | None = None
        Indicate which sub-directories should be scanned.
        If empty, scans all sub-directories.

    strategy : Literal["serial", "pool"], default="pool"
        Method used to scan the directory containing XML files.
        Use "serial" for sequential scanning or "pool" for parallel scanning.

    buffer : int, default=50
        Number of researchers to buffer before committing to the database.
        Use higher numbers on production.

    processed : Path, default=Path("logs/ingestion/processed.log")
        Path to a log file (to be) generated by this application containing
        IDs of already processed files.
        On subsequent runs, files listed in this log will be skipped.

    cores: PositiveInt
        Machine available cores. When using `pool` strategy.

    """
    if only:
        to_scan = [vitae.paths.curricula / subdir for subdir in only]
    else:
        to_scan = None

    repository = Researchers(db=database, every=buffer)
    scanner = {
        "serial": scanners.Serial(scan_only=to_scan),
        "pool": scanners.Pool(scan_only=to_scan, max_workers=cores),
    }[strategy]
    processed_curricula = curricula_xml_from(processed)

    ingestion = Ingestion(
        researchers=repository,
        scanner=scanner,
        files=vitae.paths.curricula,
        to_skip=processed_curricula,
    )

    ingestion.ingest()


# =~=~=~=~=~=~ Helper Functions ~=~=~=~=~=~=


def curricula_xml_from(log: Path) -> set[str]:
    """Load curricula from log file.

    Note:
    ----
    Its expected that each line contains only one Researcher's ID.

    Returns:
    -------
    All processed Curricula's ID into a set as `<id>.xml` strings.

    """
    with log.open("r") as file:
        result: set[str] = {line.strip("\n") + ".xml" for line in file}
    return result
