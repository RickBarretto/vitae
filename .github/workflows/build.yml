name: CI / Cross-platform build

on:
  workflow_dispatch:
  push:
    branches: [ main, master, '**' ]
    tags: ['v*', 'release-*']
  pull_request:

jobs:
  build-windows:
    name: Build Windows (x86_64)
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-ansi --with dev

      - name: Run build.py
        shell: pwsh
        run: |
          python build.py

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vitae-windows-x86_64
          path: dist/vitae/**

  build-macos:
    name: Build macOS (x86_64 / arm64)
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install poetry
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-ansi --with dev

      - name: Run build.py
        run: |
          python3 build.py

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vitae-macos
          path: dist/vitae/**

  build-linux:
    name: Build Linux (x86_64)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install system packages
        run: |
          sudo apt-get update
          sudo apt-get install -y binutils gcc libssl-dev make

      - name: Install Python dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install poetry
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-ansi --with dev

      - name: Run build.py
        run: |
          python3 build.py

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vitae-linux-x86_64
          path: dist/vitae/**

  build-linux-arm64:
    name: Build Linux (arm64)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install system packages
        run: |
          sudo apt-get update
          sudo apt-get install -y binutils gcc libssl-dev make

      - name: Install Python dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install poetry
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-ansi --with dev

      - name: Run build.py
        run: |
          python3 build.py

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vitae-linux-arm64
          path: dist/vitae/**

  publish-release:
    name: Publish Release from Tag
    # Only run this job when the workflow is triggered by a tag push
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: [build-windows, build-macos, build-linux, build-linux-arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: vitae-windows-x86_64
          path: artifacts/windows

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: vitae-macos
          path: artifacts/macos

      - name: Download Linux x86_64 artifact
        uses: actions/download-artifact@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: vitae-linux-x86_64
          path: artifacts/linux

      - name: Download Linux arm64 artifact
        uses: actions/download-artifact@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: vitae-linux-arm64
          path: artifacts/linux-arm64

      - name: Prepare per-platform release assets
        run: |
          set -e
          
          mkdir -p release-assets/windows release-assets/macos release-assets/linux release-assets/linux-arm64 || true
          
          # Copy artifacts into per-platform folders (ignore missing)
          cp -r artifacts/windows/* release-assets/windows/ 2>/dev/null || true
          cp -r artifacts/macos/* release-assets/macos/ 2>/dev/null || true
          cp -r artifacts/linux/* release-assets/linux/ 2>/dev/null || true
          cp -r artifacts/linux-arm64/* release-assets/linux-arm64/ 2>/dev/null || true
          
          # Also include any top-level dist/vitae contents as fallback into linux
          cp -r dist/vitae/* release-assets/linux/ 2>/dev/null || true
          
          # Zip each folder if it contains files
          cd release-assets
          
          for d in windows macos linux linux-arm64; do
            if [ -n "$(ls -A $d 2>/dev/null)" ]; then
              zip -r ../release-${d}.zip $d || true
            else
              echo "No files for $d"
              touch ../release-${d}.zip
            fi
          done
          
          cd ..

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-windows.zip
          asset_name: vitae-${{ github.ref_name }}-windows.zip
          asset_content_type: application/zip

      - name: Upload macOS release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-macos.zip
          asset_name: vitae-${{ github.ref_name }}-macos.zip
          asset_content_type: application/zip

      - name: Upload Linux x86_64 release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-linux.zip
          asset_name: vitae-${{ github.ref_name }}-linux-x86_64.zip
          asset_content_type: application/zip

      - name: Upload Linux arm64 release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-linux-arm64.zip
          asset_name: vitae-${{ github.ref_name }}-linux-arm64.zip
          asset_content_type: application/zip

