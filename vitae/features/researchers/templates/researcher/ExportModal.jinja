{#def 
    filtered: str,
    selected: str,
    targets: str,
    storage: str = "selectedResearchers"
#}

<dialog id="export-modal" class="bg-white/70 backdrop-blur rounded-2xl outline-none shadow-xl shadow-md p-6 max-w-[90%] w-[800px]">
    <header class="flex items-center border-b border-gray-300 mb-4">
        <h2 class="m-0 text-lg font-semibold">Exportar Pesquisador</h2>
    </header>
    <ui.CodeBlock id="lucy-lattes-csv"></ui.CodeBlock>
    <footer class="border-t border-gray-300 mt-4 p-4">
        <form method="dialog" class="block m-auto max-w-[16rem]">
            <form.Button type="submit" id="download-lucy-csv">
                <i class="bi bi-box-arrow-down"></i>
                Salvar Como...
            </form.Button>
        </form>
    </footer>
</dialog>

<style>
#export-modal::backdrop {
    backdrop-filter: blur(0.1rem);
    background-color: rgba(0, 0, 0, 0.1);
}
</style>

{# Close modal #}
<script>
(function() {
    const self = document.getElementById('export-modal')

    self.addEventListener('click', (event) => {
        if (event.target === self) self.close()
    })
})()
</script>

{# Open modal with fetched data #}
<script type="module">
(function() {
    const lucyModal = document.getElementById("export-modal")
    const codeblock = document.querySelector("#lucy-lattes-csv")
    const code = document.querySelector("#lucy-lattes-csv code")
    const save = document.querySelector("#export-modal button[type='submit']")
    const downloadBtn = document.getElementById("download-lucy-csv")

    // Close modal when clicking outside
    lucyModal.addEventListener('click', (event) => {
        if (event.target === lucyModal) lucyModal.close()
    })

    function exportResearchers(data) {
        codeblock.classList.add("hidden")
        save.classList.add("hidden")
        lucyModal.showModal()

        try {
            let selected = (typeof data === "string")? JSON.parse(data) : (data || {})
            const ids = Object.keys(selected)

            if (ids.length === 0) {
                code.textContent = "Nenhum pesquisador selecionado."
                codeblock.classList.remove("hidden")
                return
            }

            const rows = [
                "# Mantenha como separador a vírgula",
                "# Não altere o nome das colunas (linha 5)",
                "# Não altere a ordem das colunas e das 5 primeiras linhas",
                "# Insira o nome ABREVIADO do pesquisador",
                "ID_LATTES,NAME,GROUP"
            ]

            ids.forEach(id => {
                const name = selected[id] || ""
                rows.push(`${id},${name},Vitae`)
            })

            code.textContent = rows.join("\n")
            codeblock.classList.remove("hidden")
            save.classList.remove("hidden")

        } catch (err) {
            code.textContent = `Error: ${err.message}`
            codeblock.classList.remove("hidden")
        }
    } 

    // Export function
    async function exportSelectedResearchers() {
        exportResearchers(localStorage.getItem("{{storage}}") || "{}")
    }

    async function exportFilteredResearchers() {
        const qs = window.location.search || ""
        const url = "{{targets}}" + qs
        const storageKey = "{{storage}}"
        try {
            const res = await fetch(url, { credentials: "same-origin" })
            if (!res.ok) 
                throw new Error(`Fetch failed: ${res.status}`)
            
            const text = await res.text()

            console.log("Fetched text:", text)
            let data
            try {
                data = JSON.parse(text) 
            } catch { 
                data = text 
            }

            console.log("Fetched data:", data)
            exportResearchers(data)
        } catch (err) {
            console.error("Export fetch failed", err)
        }
    }

    // Download button
    downloadBtn.addEventListener("click", () => {
        const text = code.textContent
        const blob = new Blob([text], { type: "text/plain" })
        const url = URL.createObjectURL(blob)
        const anchor = document.createElement("a")
        anchor.href = url
        anchor.download = "exported.csv"
        document.body.appendChild(anchor)
        anchor.click()
        document.body.removeChild(anchor)
        URL.revokeObjectURL(url)
    })

    // Keyboard shortcut Ctrl+E / Cmd+E
    document.addEventListener("keydown", (event) => {
        if ((event.ctrlKey || event.metaKey) && event.key.toLowerCase() === "e") {
            event.preventDefault()
            exportSelectedResearchers()
        }
    })

    // Expose function if needed
    window.{{selected}} = exportSelectedResearchers
    window.{{filtered}} = exportFilteredResearchers
})()
</script>


{# Download button behavior #}
<script>
(() => {
    const downloadBtn = document.getElementById("download-lucy-csv")
    const codeBlock = document.querySelector("#lucy-lattes-csv code")

    downloadBtn.addEventListener("click", () => {
        const text = codeBlock.textContent
        const blob = new Blob([text], { type: "text/plain" })
        const url = URL.createObjectURL(blob)
        const anchor = document.createElement("a")

        anchor.href = url
        anchor.download = "exported.txt"
        document.body.appendChild(anchor)
        anchor.click()

        document.body.removeChild(anchor)
        URL.revokeObjectURL(url)
    })
})()
</script>